# TASK_9.4.1
"""
На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом.
Напишите программу, которая подсчитывает количество слов в ней.

str_input = input()
print(str_input.count(' ') + 1)
"""

# TASK_9.4.2
"""
На вход программе подается строка генетического кода, состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин). 
Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную строку генетического кода.

s = input().upper()
gen = "Аденин Гуанин Цитозин Тимин".split(" ")
for i in range(len(gen)):
    print(gen[i] + ":", s.count(gen[i][0:1]))
    
s = input().upper()
gen = "Аденин Гуанин Цитозин Тимин".split(" ")
for i in range(len(gen)):
    print(gen[i] + ":", s.count(gen[i][0:1]))
    
dnk = input().upper()
print(f'Аденин: {dnk.count("А")}')
print(f'Гуанин: {dnk.count("Г")}')
print(f'Цитозин: {dnk.count("Ц")}')
print(f'Тимин: {dnk.count("Т")}')
"""

# TASK_9.4.3
"""
Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди. На приемник ему поступает nn различных 
последовательностей кода Морзе. Декодировав их, он получает последовательности из цифр и строчного латинского алфавита, 
при этом во всех сообщениях Оди содержится число 11, причем минимум 3 раза. 
Помогите определить Джиму количество сообщений от Оди.

Формат входных данных
В первой строке подаётся число nn – количество сообщений, в последующих nn строках вводятся строки, 
содержащие латинские строчные буквы и цифры.

Формат выходных данных
Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.

num_of_mass = int(input())

count_11 = 0

for _ in range(num_of_mass):
    massages = input()
    if massages.count('11') >= 3:

        count_11 += 1
print(count_11)
"""

# TASK_9.4.4
"""
На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.
s = input()
count_digit = 0
for i in s:
    if i.isdigit():
        count_digit += 1
print(count_digit)
"""

# TASK_9.4.5
"""
На вход программе подается строка текста. Напишите программу, которая проверяет, 
что строка заканчивается подстрокой .com или .ru.

s = input()
if s.endswith(('.com', '.ru')):
    print('YES')
else:
    print('NO')
    
V-2
str_input = input()
if str_input.endswith('.com') or str_input.endswith('.ru'):
    print('YES')
else:
    print('NO')

"""

# TASK_9.4.6
"""
На вход программе подается строка текста. Напишите программу, которая выводит на экран символ, который появляется 
наиболее часто.

Формат входных данных 
На вход программе подается строка текста. Текст может содержать строчные и заглавные буквы английского и русского 
алфавита, а также цифры.

Формат выходных данных
Программа должна вывести символ, который появляется наиболее часто.

str_input = input()
counter_letter = 0
letter = 0

for i in str_input:
    if str_input.count(i) >= counter_letter:
        counter_letter = str_input.count(i)
        letter = i
print(letter)
"""

# TASK_9.4.7
"""
На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз, выведите её индекс. 
Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке, разделенных 
символом пробела. 
Если буква «f» в данной строке не встречается, следует вывести «NO».

str_input = input()

if str_input.count('f') == 1:
    print(str_input.find('f'))
elif str_input.count('f') >= 2:
    print(str_input.find('f'), str_input.rfind('f'))
else:
    print('NO')
    
V-2

str_input = input()

if str_input.count('f') == 0:
    print('NO')
elif str_input.count('f') == 1:
    print(str_input.find('f'))
elif str_input.count('f') >= 2:
    print(str_input.find('f'), str_input.rfind('f'))
"""

# TASK_9.4.8
"""
На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. Напишите программу, 
которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.

"""
str_input = input()

first_h = str_input.find('h')
last_h = str_input.rfind('h')
what_is_left = str_input[:first_h] + str_input[(last_h+1):]

print(what_is_left)
