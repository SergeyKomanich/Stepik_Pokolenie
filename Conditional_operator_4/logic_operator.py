# and(и) -- логическое умнодение
# or(или) -- логическое сложение
# not(не) -- логическое отрицание

# OPERATOR and
"""

  a	     b	   a and b
False	False	False
False	True	False
True	False	False
True	True	True
Как показывает таблица, чтобы значение выражения с оператором and было истинным,
должны быть истинными оба (все) объединенные им условия.
"""
"""
Предположим, мы написали программу для учеников от двенадцати лет,
которые учатся по крайней мере в 7 классе. Доступ к ней тем, кто младше, надо запретить.
"""
age = int(input('Сколько вам лет?: '))
grade = int(input('В каком классе вы учитесь?: '))
if age >= 12 and grade >= 7:
    print('Доступ разрешен.')
else:
    print('Доступ запрещен.')

# OPERATOR or
"""
a	     b	    a or b
False	False	False
False	True	True
True	False	True
True	True	True
Для того, чтобы выражение or было истинным, требуется, чтобы хотя бы одно условие оператора or было истинным. 
При этом не имеет значения, истинным или ложным является второе выражение.
"""

city = input('В каком городе вы живете?: ')
if city == 'Киев' or city == 'Одесса' or city == 'Измаил':
    print('Доступ разрешен.')
else:
    print('Доступ запрещен.')

# Мы можем использовать оба логических оператора одновременно:
age = int(input('Сколько вам лет?: '))
grade = int(input('В каком классе вы учитесь?: '))
city = input('В каком городе вы живете?: ')
if age >= 12 and grade >= 7 and (city == 'Москва' or city == 'Санкт-Петербург'):
    print('Доступ разрешен.')
else:
    print('Доступ запрещен.')


# OPERATOR not
"""
Таблица истинности для оператора not:

 a	    not a
False	True
True	False

Оператор not позволяет инвертировать (т.е. заменить на противоположный) результат логического выражения.
"""

age = int(input('Сколько вам лет?: '))
if not (age < 12):
    print('Доступ разрешен.')
else:
    print('Доступ запрещен.')


# Приоритеты логических операторов
"""
Логические операторы, подобно арифметическим операторам (+, -, *, /), имеют приоритет выполнения. 

Приоритет выполнения следующий:
в первую очередь выполняется логическое отрицание not;
далее выполняется логическое умножение and;
далее выполняется логическое сложение or.
Для явного указания порядка выполнения условных операторов используют скобки.
"""



























