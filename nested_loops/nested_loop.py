# TASK_7.8.1
# Решите уравнение в натуральных числах 28*n + 30*k + 31*m =365.
"""
total = 0
for n in range(1, 45):
    for k in range(1, 45):
        for m in range(1, 45):
            if n*28 + k*30 + m*31 == 365:
                total += 1
                print('n =', n, 'k =', k, 'm =', m)
print('Общее количество натуральных решений =', total)
"""

# TASK_7.8.2
"""
Имеется 100100 рублей. Сколько быков, коров и телят можно купить на все эти деньги, если плата за быка – 10 рублей, 
за корову – 5 рублей, за теленка – 0.5 рубля и надо купить 100 голов скота?

for x in range(1, 101):
    for y in range(1, 101):
        for z in range(1, 101):
            if x * 10 + y * 5 + z * 0.5 == 100 and x + y + z == 100:
                print('Быков:', x, 'Коров:', y, 'Телят:', z)
"""

# TASK_7.8.3
"""
from datetime import datetime
import time

start_time = datetime.now()
time.sleep(5)
et = 150 ** 5
ma = 150 + 1
flag = False                   # Выход из циклов, если решение найдено
for a in range(1, ma):
    if flag:
        break
    at = a ** 5
    print(a, end='\r')
    for b in range(a, ma):
        abt = at + b ** 5
        if flag or abt >= et:
            break                  # Останов перебеора, если значение превышает ответ
        for c in range(b, ma):
            abct = abt + c ** 5
            if flag or abct >= et:
                break                   # Останов перебеора, если значение превышает ответ
            for d in range(c, ma):
                abcdt = abct + d ** 5
                if int(abcdt ** 0.2) ** 5 == abcdt:            # Решение целочисленное?
                    print()
                    print(a, b, c, d, int(abcdt ** 0.2), a + b + c + d + int(abcdt ** 0.2))
                    flag = True
                    break
                elif abcdt > et:
                    break                                    # Останов перебеора, если значение превышает ответ

end_time = datetime.now()
print('Duration: {}'.format(end_time - start_time))           # Вывод затраченного времени на выполнение вычислений

# V-2

from time import time


def fermat():
    for a in range(1,151):
        a5 = a ** 5
        for b in range(a, 151):
            ab5 = a5 + b ** 5
            for c in range(b, 151):
                abc5 = ab5 + c ** 5
                for d in range(c, 151):
                    abcd5 = abc5 + d ** 5
                    e = round(abcd5 ** 0.2)
                    if abcd5 == e ** 5:
                        return a+b+c+d+e


start = time()
print(f"a + b + c + d + e = {fermat()}")
print(f"{round(time() - start,1)} seconds elapsed")
"""

# TASK_7.9.1
"""
Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой равной n.

num = 0
height = int(input())

for i in range(height):
    for j in range(i + 1):
        print(num + 1, end=' ')
        num += 1
    print()
"""

# TASK_7.9.2
"""
Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой равной n.

rows = int(input())

for i in range(1, rows + 1):
    for j in range(i):
        print(j+1, end='')
    for k in range(i-1, 0, -1):
        print(k, end='')
    print()
"""

# TASK_7.9.3
"""
На вход программе подается два натуральных числа a и b (a < b). 
Напишите программу, которая находит натуральное число из отрезка [a;b] с максимальной суммой делителей.

На вход подаются два числа, например, 2 и 6.

Таким образом, в отрезке от 2 до 6 (включая границы) содержатся числа: 2, 3, 4, 5, 6.

С помощью цикла нужно определить, на что делится каждое из этих чисел без остатка.

Пояснение:

2 делится на 1, 2 ---> 1 + 2
3 делится на 1, 3 ---> 1 + 3
4 делится на 1, 2, 4 ---> 1 + 2 + 4
5 делится на 1, 5 ---> 1 + 5
6 делится на 1, 2, 3 и 6 ---> 1 + 2 + 3 + 6
Нужно найти наибольшую сумму (1 + 2 + 3 + 6) и вывести само число, а также сумму его делителей.
Т.е. в данном случае это 6 (число) и 12 (сумма его делителей).

V-1
a, b = int(input()), int(input())
counter = 0 # счетчик подсчета суммы делителей
number = 1 # число которое будем выводить (минимум 1)
summa = 0  # тут будет сумма делителей, которую надо будет вывести
for i in range(a, b + 1):  # проверяем каждое число в [a;b]
    counter = 0 # обнуляем счетчик для каждого i
    for j in range(1, i + 1):  # берем по очереди каждый делитель числа от [1 до самого числа]
        if i % j == 0:  # если число делится на j без остатка, значит j - делитель числа
            counter += j  # создаем сумму делителей
    if counter >= summa:  # если сумма делителей больше или равна, чем суммаа делителей предыдущего числа
        summa = counter  # то counter теперь равно кол-ву делителей этого числа вместо кол-ва предыдущего
        number = i  # число у которого делителей оказалось больше, теперь равно number
print(number, summa) # в конце концов, выводим само число (у которого больше делителей) и сумму этих делителей

V-2

num1 = int(input())
num2 = int(input())

number = 0
max_divider = 0

for i in range(num1, num2 + 1):
    maximum = 0
    for j in range(1, i + 1):
        if i % j == 0:
            maximum += j
        if maximum >= max_divider:
            max_divider = maximum
            number = j

print(number, max_divider)
"""

# TASK_7.9.3
"""
На вход программе подается натуральное число n. Напишите программу, выводящую графическое изображение делимости чисел от 1 до n включительно. 
В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.


V-1
n = int(input())
for i in range(1, n + 1):          # циклом перебираем все числа от 1 до n включительно
    count = 0                      # вводим счетчик, который будет обнуляться каждую новую итерацию
    for j in range(1, i + 1):      # во внутреннем цикле проверяем каждое из чисел на кол-во делителей 
        if i % j == 0:             # если делитель есть, то ->
            count += 1             # -> к счетчику добавляем 1, это наши будующие плюсики
    print(i, '+' * count, sep='')  # вывододим строку с числом и нужным кол-вом плюсов в рамках одной итерации   
    
V-2

num = int(input())

for i in range(1, num + 1):
    print(i, end='')
    for j in range(1, i + 1):
        if i % j == 0:
            print('+', end='')
    print()
"""

# TASK_7.9.4
"""
На вход программе подается натуральное число nn. Напишите программу, которая находит цифровой корень данного числа. 
Цифровой корень числа nn получается следующим образом: если сложить все цифры этого числа, затем все цифры найденной 
суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.
192: 19+2=21, 2+1=3 При этом 12345: 1234+5=1239, 123+9=132, 13+2=15, 1+5=6

V-1

n = int(input())
while n > 9:
    last_dig = n % 10
    n = n // 10
    n += last_dig
print(n)

V-2

num = int(input())

while num // 10 > 0:
    num = num//10 + num % 10
print(num)
"""

# TASK_7.9.5

"""
from math import factorial

num = int(input())
sum_factorial = 0

for i in range(1, num + 1):
    sum_factorial += factorial(i)
print(sum_factorial)

"""

# TASK_7.9.6
"""
На вход программе подается два натуральных числа a и b (a < b). 
Напишите программу, которая находит все простые числа от a до b включительно.

a = int(input())
b = int(input())

for i in range(a, b + 1):
    if i == 1:
        continue
    for j in range(2, i):
        if i % j == 0:
            break
    else:
        print(i)
"""




















